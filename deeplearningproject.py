# -*- coding: utf-8 -*-
"""DeepLearningProject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Yu9R_kGwDfqQCxDjtO54FYigAoH9D44P
"""

import tensorflow as tf
import matplotlib.pyplot as plt
import numpy as np

# Step 1: Load and preprocess the dataset
def load_data():
    """Load Fashion MNIST dataset and preprocess it."""
    (x_train, y_train), (x_test, y_test) = tf.keras.datasets.fashion_mnist.load_data()

    # Normalize pixel values
    x_train = x_train / 255.0
    x_test = x_test / 255.0

    # Expand dimensions for CNN input
    x_train = x_train[..., np.newaxis]
    x_test = x_test[..., np.newaxis]

    return (x_train, y_train), (x_test, y_test)

# Step 2: Build the model
def build_model():
    """Create a CNN model for image classification."""
    model = tf.keras.Sequential([
        tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
        tf.keras.layers.MaxPooling2D((2, 2)),
        tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
        tf.keras.layers.MaxPooling2D((2, 2)),
        tf.keras.layers.Flatten(),
        tf.keras.layers.Dense(128, activation='relu'),
        tf.keras.layers.Dense(10, activation='softmax')
    ])
    model.compile(optimizer='adam',
                  loss='sparse_categorical_crossentropy',
                  metrics=['accuracy'])
    return model

# Step 3: Train the model
def train_model(model, x_train, y_train, x_val, y_val):
    """Train the CNN model."""
    history = model.fit(x_train, y_train, epochs=10, validation_data=(x_val, y_val))
    return history

# Step 4: Visualize training results
def plot_metrics(history):
    """Plot accuracy and loss curves."""
    plt.figure(figsize=(12, 5))

    # Accuracy
    plt.subplot(1, 2, 1)
    plt.plot(history.history['accuracy'], label='Train Accuracy')
    plt.plot(history.history['val_accuracy'], label='Val Accuracy')
    plt.title('Model Accuracy')
    plt.xlabel('Epoch')
    plt.ylabel('Accuracy')
    plt.legend()

    # Loss
    plt.subplot(1, 2, 2)
    plt.plot(history.history['loss'], label='Train Loss')
    plt.plot(history.history['val_loss'], label='Val Loss')
    plt.title('Model Loss')
    plt.xlabel('Epoch')
    plt.ylabel('Loss')
    plt.legend()

    plt.tight_layout()
    plt.show()

# Step 5: Evaluate and visualize predictions
def show_predictions(model, x_test, y_test, class_names):
    """Display sample predictions with labels."""
    predictions = model.predict(x_test[:25])
    pred_labels = np.argmax(predictions, axis=1)

    plt.figure(figsize=(10, 10))
    for i in range(25):
        plt.subplot(5, 5, i + 1)
        plt.xticks([])
        plt.yticks([])
        plt.grid(False)
        plt.imshow(x_test[i].reshape(28, 28), cmap=plt.cm.binary)
        color = 'blue' if pred_labels[i] == y_test[i] else 'red'
        plt.xlabel(f"{class_names[pred_labels[i]]}", color=color)
    plt.show()

# Main function
def run_project():
    class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
                   'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']

    (x_train, y_train), (x_test, y_test) = load_data()
    model = build_model()
    history = train_model(model, x_train, y_train, x_test, y_test)
    plot_metrics(history)
    show_predictions(model, x_test, y_test, class_names)

# Run the project
if __name__ == "__main__":
    run_project()